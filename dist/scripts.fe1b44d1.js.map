{"version":3,"sources":["scripts/renderer.js","scripts/Chip8.js","scripts/Keyboard.js","scripts/Speaker.js","scripts/index.js"],"names":["Monitor","COLS","ROWS","SCALE","canvas","scale","cols","rows","display","Array","i","console","log","width","height","canvasCtx","getContext","x","y","fillStyle","fillRect","Math","floor","setPixel","paint","chip8","MEMORY_SIZE","NUM_REGISTERS","monitor","keyboard","mempry","Uint8Array","V","index","pc","stack","sp","delayTimer","soundTimer","paused","speed","sprites","length","memory","program","opcode","interpretInstruction","updateTimers","sound","speaker","play","stop","instruction","clear","pop","push","v","sum","Error","rand","random","row","sprite","col","isKeyPressed","onNextKeyPress","key","bind","parseInt","ri","Keyboard","keymap","keysPressed","window","addEventListener","onKeyDown","onKeyUp","keyCode","event","which","Speaker","FREQ","audioCtx","AudioContext","resume","oscillator","createOscillator","frequency","setValueAtTime","currentTime","type","connect","destination","start","disconnect","loop","fpsInterval","startTime","now","then","elapsed","FPS","romSelector","document","getElementById","rom","options","selectedIndex","value","loadROM","reloadButton","loadingText","romName","Chip8","step","Date","cycle","requestAnimationFrame","cancelAnimationFrame","url","disabled","innerHTML","fetch","res","arrayBuffer","buffer","byteLength","loadSpritsIntoMemory","loadProgramIntoMemory"],"mappings":"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","file":"scripts.fe1b44d1.js","sourceRoot":"..","sourcesContent":["const COLS = 64;\r\nconst ROWS = 32;\r\nconst SCALE = 20;\r\n\r\nclass Monitor {\r\n    constructor(canvas, scale) {\r\n        this.cols = COLS;\r\n        this.rows = ROWS;\r\n\r\n        this.display = new Array(this.cols * this.rows);\r\n        for(let i=0; i < this.cols*this.rows; i++)\r\n            this.display[i] = 0;\r\n        this.canvas = canvas;\r\n        this.scale = SCALE;\r\n        console.log(this.canvas);\r\n        \r\n        this.canvas.width = this.cols * this.scale;\r\n        this.canvas.height = this.rows * this.scale;\r\n\r\n        this.canvasCtx = this.canvas.getContext('2d');\r\n    }\r\n\r\n    setPixel(x, y) {\r\n        if(x > this.cols)\r\n            x -= this.cols;\r\n        else if(x < 0)\r\n            x += this.cols;\r\n\r\n        if(y > this.rows)\r\n            y -= this.rows;\r\n        else if(y<0)\r\n            y += this.rows;\r\n\r\n        this.display[x + (y * this.cols)] ^= 1;\r\n        return this.display[x + (y * this.cols)] != 1;\r\n    }\r\n\r\n    clear() {\r\n        this.display = new Array(this.cols * this.rows);\r\n        for(let i=0; i < this.cols*this.rows; i++)\r\n            this.display[i] = 0;\r\n    }\r\n\r\n    paint() {\r\n        this.canvasCtx.fillStyle = '#000';\r\n        this.canvasCtx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        for(let i=0; i < this.cols*this.rows; i++) {\r\n            let x = (i % this.cols) * this.scale;\r\n            let y = Math.floor(i / this.cols) * this.scale;\r\n\r\n            if(this.display[i] == 1) {\r\n                this.canvasCtx.fillStyle = '#FFF';\r\n                this.canvasCtx.fillRect(x, y, this.scale, this.scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    testRender() {\r\n        this.setPixel(0, 0);\r\n        this.setPixel(5, 2);\r\n        this.paint();\r\n    }\r\n}\r\n\r\nexport default Monitor;","const MEMORY_SIZE = 4096\r\nconst NUM_REGISTERS = 16;\r\n\r\nclass chip8\r\n{\r\n    constructor(monitor, keyboard)\r\n    {\r\n        this.mempry = new Uint8Array(MEMORY_SIZE);\r\n        this.V = new Uint8Array(NUM_REGISTERS);\r\n\r\n        this.index = 0;\r\n\r\n        this.pc = 0x200;\r\n\r\n        this.stack = []\r\n\r\n        this.sp = 0;\r\n\r\n        this.delayTimer = 0;\r\n\r\n        this.soundTimer = 0;\r\n\r\n        //this.keyboard\r\n        this.keyboard = keyboard;\r\n\r\n        this.monitor = monitor;\r\n\r\n        this.paused = false;\r\n\r\n        this.speed = 10;\r\n    }\r\n\r\n    \r\n\r\n    loadSpritsIntoMemory() {\r\n        const sprites = [\r\n            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\r\n            0x20, 0x60, 0x20, 0x20, 0x70, // 1\r\n            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\r\n            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\r\n            0x90, 0x90, 0xF0, 0x10, 0x10, // 4\r\n            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\r\n            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\r\n            0xF0, 0x10, 0x20, 0x40, 0x40, // 7\r\n            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\r\n            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\r\n            0xF0, 0x90, 0xF0, 0x90, 0x90, // A\r\n            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\r\n            0xF0, 0x80, 0x80, 0x80, 0xF0, // C\r\n            0xE0, 0x90, 0x90, 0x90, 0xE0, // D\r\n            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\r\n            0xF0, 0x80, 0xF0, 0x80, 0x80  // F\r\n        ];\r\n        for (let i = 0; i < sprites.length; i++) {\r\n            this.memory[i] = sprites[i];\r\n        }\r\n    }\r\n\r\n    loadProgramIntoMemory(program) {\r\n        for(let i = 0; i < program.length; i++) {\r\n            this.memory[0x200 + i] = program[i];\r\n        }\r\n    }\r\n\r\n    updateTimers() {\r\n        if(this.delayTimer > 0)\r\n            this.delayTimer -= 1;\r\n        \r\n        if(this.soundTimer > 0)\r\n            this.soundTimer -= 1;\r\n    }\r\n\r\n    cycle() {\r\n        for(let i=0; i < this.speed; i++) {\r\n            if(!this.paused) {\r\n                let opcode = (this.memory[this.pc] << 8 | this.memory[this.pc + 1]);\r\n                this.interpretInstruction(opcode);\r\n            }\r\n        }\r\n\r\n        if(!this.paused)\r\n            this.updateTimers();\r\n        this.sound();\r\n        this.monitor.paint();\r\n    }\r\n\r\n    sound() {\r\n        if(this.soundTimer > 0)\r\n            this.speaker.play();\r\n        else\r\n            this.speaker.stop();\r\n    }\r\n\r\n    interpretInstruction(instruction) {\r\n        this.pc += 2;\r\n        \r\n        let x = (instruction & 0x0F00) >> 8;\r\n        let y = (instruction & 0x00F0) >> 4;\r\n\r\n        switch(instruction & 0xF000) {\r\n            case 0x0000:\r\n                switch(instruction) {\r\n                    case 0x00E0:\r\n                        this.monitor.clear(); // CLR\r\n                        break;\r\n                    case 0x0EE:\r\n                        this.pc = this.stack.pop(); // RET (May later change to this.sp--)\r\n                        break;\r\n                }\r\n                break;\r\n            case 0x1000:\r\n                this.pc = instruction & 0xFFF; // JP addr\r\n                break;\r\n            case 0x2000:\r\n                this.stack.push(this.pc);\r\n                this.pc = instruction & 0xFFF; // CALL addr\r\n                break;\r\n            case 0x3000:\r\n                if(this.v[x] === (instruction & 0xFF)) // SE Vx, byte\r\n                    this.pc += 2;\r\n                break;\r\n            case 0x4000:\r\n                if(this.v[x] != (instruction & 0xFF)) { // SNE Vx, byte\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x5000:\r\n                if(this.v[x] === this.v[y]) { // SE Vx, Vy\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x6000:\r\n                this.v[x] = (instruction & 0xFF); // LD Vx, byte\r\n                break;\r\n            case 0x7000:\r\n                this.v[x] += (instruction & 0xFF); // ADD Vx, byte\r\n                break;\r\n            case 0x8000:\r\n                switch (instruction & 0xF) {\r\n                    case 0x0:\r\n                        this.v[x] = this.v[y]; // LD Vx, Vy\r\n                        break;\r\n                    case 0x1:\r\n                        this.v[x] |= this.v[y]; // OR Vx, Vy\r\n                        break;\r\n                    case 0x2:\r\n                        this.v[x] &= this.v[y]; // AND Vx, Vy\r\n                        break;\r\n                    case 0x3:\r\n                        this.v[x] ^= this.v[y]; // XOR Vx, Vy\r\n                        break;\r\n                    case 0x4:\r\n                        let sum = (this.v[x] += this.v[y]); // ADD Vx, Vy\r\n\r\n                        this.v[0xF] = 0;\r\n\r\n                        if(sum > 0xFF)\r\n                            this.v[0xF] = 1;\r\n\r\n                        this.v[x] = sum;\r\n                        break;\r\n                    case 0x5:\r\n                        this.v[0xF] = 0;            \r\n                        if(this.v[x] > this.v[y]) // SUB Vx, Vy\r\n                            this.v[0xF] = 1;\r\n                        \r\n                        this.v[x] -= this.v[y];\r\n                        break;\r\n                    case 0x6:\r\n                        this.v[0xF] = this.v[x] & 0x1; // SHR Vx, vy\r\n                        this.v[x] >>= 1;\r\n                        break;\r\n                    case 0x7:\r\n                        this.v[0xF] = 0;       \r\n                        if(this.v[y] > this.v[x]) // SUBN Vx, Vy\r\n                            this.v[0xF] = 1;\r\n\r\n                        this.v[x] = this.v[y] - this.v[x];\r\n                        break;\r\n                    case 0xE:\r\n                        this.v[0xF] = this.v[x] & 0x80; // SHL Vx {, Vy}\r\n                        this.v[x] <<= 1;\r\n                        break;\r\n                    default:\r\n                        throw new Error('BAD OPCODE');\r\n                }\r\n                break;\r\n            case 0x9000:\r\n                if(this.v[x] != this.v[y]) // SNE Vx, Vy\r\n                    this.pc += 2;\r\n                break;\r\n            case 0xA000:\r\n                this.index = instruction & 0xFFF; // LD I, addr\r\n                break;\r\n            case 0xB000:\r\n                this.pc = (instruction & 0xFFF) + this.v[0]; // JP V0, addr\r\n                break;\r\n            case 0xC000:\r\n                let rand = Math.floor(Math.random() * 0xFF); // RND Vx, byte\r\n                this.v[x] = rand & (instruction & 0xFF);\r\n                break;\r\n            case 0xD000:\r\n                let width = 8; // DRW Vx, Vy, nibble\r\n                let height = (instruction & 0xF);\r\n                \r\n                this.v[0xF] = 0;\r\n\r\n                for(let row = 0; row < height; row++) {\r\n                    let sprite = this.memory[this.index + row];\r\n\r\n                    for(let col = 0; col < width; col++) {\r\n                        if((sprite & 0x80) > 0) {\r\n                            if(this.monitor.setPixel(this.v[x] + col, this.v[y] + row)) {\r\n                                this.v[0xF] = 1;\r\n                            }\r\n                        }\r\n                        sprite <<= 1;\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case 0xE000:\r\n                switch (instruction & 0xFF) {\r\n                    case 0x9E:\r\n                        if(this.keyboard.isKeyPressed(this.v[x])) { // SKP Vx\r\n                            this.pc += 2;\r\n                        }\r\n                        break;\r\n                    case 0xA1:\r\n                        if (!this.keyboard.isKeyPressed(this.v[x])) { // SKNP Vx\r\n                            this.pc += 2;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw new Error('BAD OPCODE');\r\n                }\r\n        \r\n                break;\r\n            case 0xF000:\r\n                switch(instruction & 0xFF) {\r\n                    case 0x07:\r\n                        this.v[x] = this.delayTimer; // LD Vx, DT\r\n                        break;\r\n                    case 0x0A:\r\n                        this.paused = true; // LD Vx, K\r\n\r\n                        let nextKeyPress = (key) => {\r\n                            this.v[x] = key;\r\n                            this.paused = false;\r\n                        };\r\n\r\n                        this.keyboard.onNextKeyPress = nextKeyPress.bind(this);\r\n                        break;\r\n                    case 0x15:\r\n                        this.delayTimer = this.v[x]; // LD Dt, Vx\r\n                        break;\r\n                    case 0x18:\r\n                        this.soundTimer = this.v[x]; // LD ST, Vx\r\n                        break;\r\n                    case 0x1E:\r\n                        this.index += this.v[x]; // ADD I, Vx\r\n                        break;\r\n                    case 0x29:\r\n                        this.index = this.v[x] * 5; //  LD F, Vx\r\n                        break;\r\n                    case 0x33:\r\n                        this.memory[this.index] = parseInt(this.v[x] / 100); // LD B, Vx\r\n                        this.memory[this.index + 1] = parseInt((this.v[x]%100)/10);\r\n                        this.memory[this.index + 2] = parseInt(this.v[x]%10);\r\n                        break;\r\n                    case 0x55:\r\n                        for (let ri=0; ri <= x; ri++)  // LD [I], Vx\r\n                            this.memory[this.index + ri] = this.v[ri];\r\n                        break;\r\n                    case 0x65:\r\n                        for(let ri=0; ri <= x; ri++) // LD Vx, [I]\r\n                            this.v[ri] = this.memory[this.index + ri];\r\n                        break;\r\n                    default:\r\n                        throw new Error('0xF BAD OPCODE ' + instruction);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('BAD OPCODE');\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    \r\n}\r\n\r\nexport default chip8;","class Keyboard {\r\n    constructor() {\r\n        this.keymap = {\r\n            49: 0x1, // 1 1\r\n            50: 0x2, // 2 2\r\n            51: 0x3, // 3 3\r\n            52: 0xc, // 4 C\r\n            81: 0x4, // Q 4\r\n            87: 0x5, // W 5\r\n            69: 0x6, // E 6\r\n            82: 0xD, // R D\r\n            65: 0x7, // A 7\r\n            83: 0x8, // S 8\r\n            68: 0x9, // D 9\r\n            70: 0xE, // F E\r\n            90: 0xA, // Z A\r\n            88: 0x0, // X 0\r\n            67: 0xB, // C B\r\n            86: 0xF  // V F\r\n        };\r\n\r\n        this.keysPressed = [];\r\n        this.onNextKeyPress = null;\r\n        \r\n        window.addEventListener('keydown', this.onKeyDown.bind(this), false);\r\n        window.addEventListener('keyup', this.onKeyUp.bind(this), false);\r\n    }\r\n\r\n    isKeyPressed(keyCode) {\r\n        return this.keysPressed[keyCode];\r\n    }\r\n\r\n    onKeyDown(event) {\r\n        let key = this.keymap[event.which];\r\n        this.keysPressed[key] = true;\r\n    \r\n        // Make sure onNextKeyPress is initialized and the pressed key is actually mapped to a Chip-8 key\r\n        if (this.onNextKeyPress !== null && key) {\r\n            this.onNextKeyPress(parseInt(key));\r\n            this.onNextKeyPress = null;\r\n        }\r\n    }\r\n\r\n    onKeyUp(event) {\r\n        let key = this.keymap[event.which];\r\n        this.keysPressed[key] = false;\r\n    }\r\n\r\n}\r\nexport default Keyboard;","const FREQ = 440;\r\n\r\nclass Speaker {\r\n    constructor() {\r\n        this.audioCtx = new window.AudioContext();\r\n        this.audioCtx.resume();\r\n\r\n        window.addEventListener('click', () => {\r\n            this.audioCtx.resume();\r\n        });\r\n    }\r\n\r\n    play() {\r\n        if (this.audioCtx && !this.oscillator) {\r\n            this.oscillator = this.audioCtx.createOscillator();\r\n            this.oscillator.frequency.setValueAtTime(FREQ, this.audioCtx.currentTime);\r\n            this.oscillator.type = 'square';\r\n            this.oscillator.connect(this.audioCtx.destination);\r\n            this.oscillator.start();\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if(this.oscillator) {\r\n            this.oscillator.stop();\r\n            this.oscillator.disconnect();\r\n            this.oscillator = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Speaker;","import Monitor from './renderer';\r\nimport Chip8 from './Chip8';\r\nimport Keyboard from './Keyboard';\r\nimport Speaker from './Speaker';\r\nimport './style.css';\r\n\r\nconst FPS = 60;\r\nlet loop, fpsInterval, startTime, now, then, elapsed;\r\n\r\nconst romSelector = document.getElementById('roms');\r\nromSelector.addEventListener('change', () => {\r\n    const rom = romSelector.options[romSelector.selectedIndex].value;\r\n    console.log(rom);\r\n    loadROM(rom);\r\n});\r\n\r\nconst reloadButton = document.getElementById('reload');\r\nreloadButton.addEventListener('click', () => {\r\n    console.log(\"click\")\r\n    const rom = romSelector.options[romSelector.selectedIndex].value;\r\n    console.log(rom);\r\n    loadROM(rom);\r\n});\r\n\r\nconst loadingText = document.getElementById('loading-text');\r\n\r\nfunction loadROM(romName) {\r\n    const monitor = new Monitor(document.getElementById('screen'), 20);\r\n    const keyboard = new Keyboard();\r\n    const speaker = new Speaker();\r\n    const chip8 = new Chip8(monitor, keyboard, speaker);\r\n    window.cancelAnimationFrame(loop);\r\n\r\n    function step() {\r\n        now = Date.now();\r\n        elapsed = now - then;\r\n    \r\n        if(elapsed > fpsInterval){\r\n            chip8.cycle();\r\n        }\r\n    \r\n        loop = requestAnimationFrame(step);\r\n        \r\n    }\r\n    const url = `/rom/${romName}`;\r\n    reloadButton.disabled = true;\r\n    loadingText.innerHTML = 'Loading ' + romName + ' ... ';\r\n\r\n    fetch(url).then(res => res.arrayBuffer())\r\n            .then(buffer => {\r\n                    console.log(buffer.byteLength);\r\n                    const program = new Uint8Array(buffer);\r\n                    fpsInterval = 1000 / FPS;\r\n                    then = Date.now();\r\n                    startTime = then;\r\n                    reloadButton.disabled = false;\r\n                    chip8.loadSpritsIntoMemory();\r\n                    chip8.loadProgramIntoMemory(program);\r\n                    console.log(program);\r\n                    loop = requestAnimationFrame(step);\r\n                    loadingText.innerHTML = 'Playing ' + romName + ' ';\r\n    });\r\n}\r\n\r\nloadROM('BLITZ');\r\n"]}